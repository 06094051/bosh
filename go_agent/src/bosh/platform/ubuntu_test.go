package platform_test

import (
	. "bosh/platform"
	boshdisk "bosh/platform/disk"
	fakedisk "bosh/platform/disk/fakes"
	fakestats "bosh/platform/stats/fakes"
	boshsettings "bosh/settings"
	boshdirs "bosh/settings/directories"
	fakesys "bosh/system/fakes"
	"fmt"
	"github.com/stretchr/testify/assert"
	"os"
	"path/filepath"

	. "github.com/onsi/ginkgo"
	"time"
)

func testUbuntuCreateUserWithPassword(t assert.TestingT, password string, expectedUseradd []string) {
	deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

	err := ubuntu.CreateUser("foo-user", password, "/some/path/to/home")
	assert.NoError(t, err)

	basePathStat := deps.fs.GetFileTestStat("/some/path/to/home")
	assert.Equal(t, fakesys.FakeFileTypeDir, basePathStat.FileType)
	assert.Equal(t, os.FileMode(0755), basePathStat.FileMode)

	assert.Equal(t, 1, len(deps.cmdRunner.RunCommands))
	assert.Equal(t, expectedUseradd, deps.cmdRunner.RunCommands[0])
}

const UBUNTU_EXPECTED_ETC_HOSTS = `127.0.0.1 localhost foobar.local

# The following lines are desirable for IPv6 capable hosts
::1 localhost ip6-localhost ip6-loopback foobar.local
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts
`

func testUbuntuSetupDhcp(t assert.TestingT,
	deps ubuntuDependencies,
	platform Platform) {
	networks := boshsettings.Networks{
		"bosh": boshsettings.Network{
			Default: []string{"dns"},
			Dns:     []string{"xx.xx.xx.xx", "yy.yy.yy.yy", "zz.zz.zz.zz"},
		},
		"vip": boshsettings.Network{
			Default: []string{},
			Dns:     []string{"aa.aa.aa.aa"},
		},
	}

	platform.SetupDhcp(networks)

	dhcpConfig := deps.fs.GetFileTestStat("/etc/dhcp3/dhclient.conf")
	assert.NotNil(t, dhcpConfig)
	assert.Equal(t, dhcpConfig.Content, UBUNTU_EXPECTED_DHCP_CONFIG)
}

const UBUNTU_EXPECTED_DHCP_CONFIG = `# Generated by bosh-agent

option rfc3442-classless-static-routes code 121 = array of unsigned integer 8;

send host-name "<hostname>";

request subnet-mask, broadcast-address, time-offset, routers,
	domain-name, domain-name-servers, domain-search, host-name,
	netbios-name-servers, netbios-scope, interface-mtu,
	rfc3442-classless-static-routes, ntp-servers;

prepend domain-name-servers zz.zz.zz.zz;
prepend domain-name-servers yy.yy.yy.yy;
prepend domain-name-servers xx.xx.xx.xx;
`

func testUbuntuSetupManualNetworking(t assert.TestingT,
	deps ubuntuDependencies,
	platform Platform) {
	networks := boshsettings.Networks{
		"bosh": boshsettings.Network{
			Default: []string{"dns", "gateway"},
			Ip:      "192.168.195.6",
			Netmask: "255.255.255.0",
			Gateway: "192.168.195.1",
			Mac:     "22:00:0a:1f:ac:2a",
			Dns:     []string{"10.80.130.2", "10.80.130.1"},
		},
	}
	deps.fs.WriteToFile("/sys/class/net/eth0", "")
	deps.fs.WriteToFile("/sys/class/net/eth0/address", "22:00:0a:1f:ac:2a")
	deps.fs.GlobPaths = []string{"/sys/class/net/eth0"}

	platform.SetupManualNetworking(networks)

	networkConfig := deps.fs.GetFileTestStat("/etc/network/interfaces")
	assert.NotNil(t, networkConfig)
	assert.Equal(t, networkConfig.Content, UBUNTU_EXPECTED_NETWORK_INTERFACES)

	resolvConf := deps.fs.GetFileTestStat("/etc/resolv.conf")
	assert.NotNil(t, resolvConf)
	assert.Equal(t, resolvConf.Content, UBUNTU_EXPECTED_RESOLV_CONF)
}

const UBUNTU_EXPECTED_NETWORK_INTERFACES = `auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
    address 192.168.195.6
    network 192.168.195.0
    netmask 255.255.255.0
    broadcast 192.168.195.255
    gateway 192.168.195.1`

const UBUNTU_EXPECTED_RESOLV_CONF = `nameserver 10.80.130.1
nameserver 10.80.130.2
`

const UBUNTU_EXPECTED_ETC_LOGROTATE = `# Generated by bosh-agent

fake-base-path/data/sys/log/*.log fake-base-path/data/sys/log/*/*.log fake-base-path/data/sys/log/*/*/*.log {
  missingok
  rotate 7
  compress
  delaycompress
  copytruncate
  size=fake-size
}
`

func testUbuntuUnmountPersistentDisk(t assert.TestingT, isMounted bool) {
	deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)
	fakeMounter := deps.diskManager.FakeMounter
	fakeMounter.UnmountDidUnmount = !isMounted

	deps.fs.WriteToFile("/dev/vdx", "")

	didUnmount, err := ubuntu.UnmountPersistentDisk("/dev/sdx")
	assert.NoError(t, err)
	assert.Equal(t, didUnmount, !isMounted)
	assert.Equal(t, "/dev/vdx1", fakeMounter.UnmountPartitionPath)
}

func testUbuntuCalculateEphemeralDiskPartitionSizes(t assert.TestingT, totalMemInMb, diskSizeInMb, expectedSwap uint64) {
	deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)
	deps.collector.MemStats.Total = totalMemInMb * uint64(1024*1024)

	fakePartitioner := deps.diskManager.FakePartitioner
	fakePartitioner.GetDeviceSizeInMbSizes = map[string]uint64{
		"/dev/hda": diskSizeInMb,
	}

	err := ubuntu.SetupEphemeralDiskWithPath("/dev/hda")

	assert.NoError(t, err)
	expectedPartitions := []boshdisk.Partition{
		{SizeInMb: expectedSwap, Type: boshdisk.PartitionTypeSwap},
		{SizeInMb: diskSizeInMb - expectedSwap, Type: boshdisk.PartitionTypeLinux},
	}
	assert.Equal(t, fakePartitioner.PartitionPartitions, expectedPartitions)
}

type ubuntuDependencies struct {
	collector   *fakestats.FakeStatsCollector
	fs          *fakesys.FakeFileSystem
	cmdRunner   *fakesys.FakeCmdRunner
	diskManager fakedisk.FakeDiskManager
	dirProvider boshdirs.DirectoriesProvider
}

func buildUbuntu(cdromWaitInterval time.Duration, diskWaitTimeout time.Duration) (
	deps ubuntuDependencies,
	platform Platform,
) {
	deps.collector = &fakestats.FakeStatsCollector{}
	deps.fs = &fakesys.FakeFileSystem{}
	deps.cmdRunner = &fakesys.FakeCmdRunner{}
	deps.diskManager = fakedisk.NewFakeDiskManager(deps.cmdRunner)
	deps.dirProvider = boshdirs.NewDirectoriesProvider("/fake-dir")

	platform = NewUbuntuPlatform(
		deps.collector,
		deps.fs,
		deps.cmdRunner,
		deps.diskManager,
		deps.dirProvider,
		cdromWaitInterval,
		1*time.Millisecond,
		diskWaitTimeout,
	)
	return
}
func init() {
	Describe("Testing with Ginkgo", func() {
		It("ubuntu setup runtime configuration", func() {
			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

			err := ubuntu.SetupRuntimeConfiguration()
			assert.NoError(GinkgoT(), err)

			assert.Equal(GinkgoT(), 1, len(deps.cmdRunner.RunCommands))
			assert.Equal(GinkgoT(), []string{"bosh-agent-rc"}, deps.cmdRunner.RunCommands[0])
		})
		It("ubuntu create user", func() {

			expectedUseradd := []string{
				"useradd",
				"-m",
				"-b", "/some/path/to/home",
				"-s", "/bin/bash",
				"-p", "bar-pwd",
				"foo-user",
			}

			testUbuntuCreateUserWithPassword(GinkgoT(), "bar-pwd", expectedUseradd)
		})
		It("ubuntu create user with an empty password", func() {

			expectedUseradd := []string{
				"useradd",
				"-m",
				"-b", "/some/path/to/home",
				"-s", "/bin/bash",
				"foo-user",
			}

			testUbuntuCreateUserWithPassword(GinkgoT(), "", expectedUseradd)
		})
		It("ubuntu add user to groups", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

			err := ubuntu.AddUserToGroups("foo-user", []string{"group1", "group2", "group3"})
			assert.NoError(GinkgoT(), err)

			assert.Equal(GinkgoT(), 1, len(deps.cmdRunner.RunCommands))

			usermod := []string{"usermod", "-G", "group1,group2,group3", "foo-user"}
			assert.Equal(GinkgoT(), usermod, deps.cmdRunner.RunCommands[0])
		})
		It("ubuntu delete users with prefix and regex", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

			passwdFile := fmt.Sprintf(`%sfoo:...
%sbar:...
foo:...
bar:...
foobar:...
%sfoobar:...`,
				boshsettings.EPHEMERAL_USER_PREFIX, boshsettings.EPHEMERAL_USER_PREFIX, boshsettings.EPHEMERAL_USER_PREFIX,
			)

			deps.fs.WriteToFile("/etc/passwd", passwdFile)

			err := ubuntu.DeleteEphemeralUsersMatching("bar$")
			assert.NoError(GinkgoT(), err)
			assert.Equal(GinkgoT(), 2, len(deps.cmdRunner.RunCommands))
			assert.Equal(GinkgoT(), []string{"userdel", "-r", "bosh_bar"}, deps.cmdRunner.RunCommands[0])
			assert.Equal(GinkgoT(), []string{"userdel", "-r", "bosh_foobar"}, deps.cmdRunner.RunCommands[1])
		})
		It("ubuntu setup ssh", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)
			deps.fs.HomeDirHomePath = "/some/home/dir"

			ubuntu.SetupSsh("some public key", "vcap")

			sshDirPath := "/some/home/dir/.ssh"
			sshDirStat := deps.fs.GetFileTestStat(sshDirPath)

			assert.Equal(GinkgoT(), deps.fs.HomeDirUsername, "vcap")

			assert.NotNil(GinkgoT(), sshDirStat)
			assert.Equal(GinkgoT(), fakesys.FakeFileTypeDir, sshDirStat.FileType)
			assert.Equal(GinkgoT(), sshDirStat.FileMode, os.FileMode(0700))
			assert.Equal(GinkgoT(), sshDirStat.Username, "vcap")

			authKeysStat := deps.fs.GetFileTestStat(filepath.Join(sshDirPath, "authorized_keys"))

			assert.NotNil(GinkgoT(), authKeysStat)
			assert.Equal(GinkgoT(), authKeysStat.FileType, fakesys.FakeFileTypeFile)
			assert.Equal(GinkgoT(), authKeysStat.FileMode, os.FileMode(0600))
			assert.Equal(GinkgoT(), authKeysStat.Username, "vcap")
			assert.Equal(GinkgoT(), authKeysStat.Content, "some public key")
		})
		It("ubuntu set user password", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

			ubuntu.SetUserPassword("my-user", "my-encrypted-password")
			assert.Equal(GinkgoT(), 1, len(deps.cmdRunner.RunCommands))
			assert.Equal(GinkgoT(), []string{"usermod", "-p", "my-encrypted-password", "my-user"}, deps.cmdRunner.RunCommands[0])
		})
		It("ubuntu setup hostname", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

			ubuntu.SetupHostname("foobar.local")
			assert.Equal(GinkgoT(), 1, len(deps.cmdRunner.RunCommands))
			assert.Equal(GinkgoT(), []string{"hostname", "foobar.local"}, deps.cmdRunner.RunCommands[0])

			hostnameFileContent, err := deps.fs.ReadFile("/etc/hostname")
			assert.NoError(GinkgoT(), err)
			assert.Equal(GinkgoT(), "foobar.local", hostnameFileContent)

			hostsFileContent, err := deps.fs.ReadFile("/etc/hosts")
			assert.NoError(GinkgoT(), err)
			assert.Equal(GinkgoT(), UBUNTU_EXPECTED_ETC_HOSTS, hostsFileContent)
		})
		It("ubuntu setup dhcp", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)
			testUbuntuSetupDhcp(GinkgoT(), deps, ubuntu)

			assert.Equal(GinkgoT(), len(deps.cmdRunner.RunCommands), 2)
			assert.Equal(GinkgoT(), deps.cmdRunner.RunCommands[0], []string{"pkill", "dhclient3"})
			assert.Equal(GinkgoT(), deps.cmdRunner.RunCommands[1], []string{"/etc/init.d/networking", "restart"})
		})
		It("ubuntu setup dhcp with pre existing configuration", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)
			deps.fs.WriteToFile("/etc/dhcp3/dhclient.conf", UBUNTU_EXPECTED_DHCP_CONFIG)
			testUbuntuSetupDhcp(GinkgoT(), deps, ubuntu)

			assert.Equal(GinkgoT(), len(deps.cmdRunner.RunCommands), 0)
		})
		It("ubuntu setup manual networking", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

			testUbuntuSetupManualNetworking(GinkgoT(), deps, ubuntu)

			time.Sleep(100 * time.Millisecond)

			assert.Equal(GinkgoT(), len(deps.cmdRunner.RunCommands), 8)
			assert.Equal(GinkgoT(), deps.cmdRunner.RunCommands[0], []string{"service", "network-interface", "stop", "INTERFACE=eth0"})
			assert.Equal(GinkgoT(), deps.cmdRunner.RunCommands[1], []string{"service", "network-interface", "start", "INTERFACE=eth0"})
			assert.Equal(GinkgoT(), deps.cmdRunner.RunCommands[2], []string{"arping", "-c", "1", "-U", "-I", "eth0", "192.168.195.6"})
			assert.Equal(GinkgoT(), deps.cmdRunner.RunCommands[7], []string{"arping", "-c", "1", "-U", "-I", "eth0", "192.168.195.6"})
		})
		It("ubuntu setup logrotate", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

			ubuntu.SetupLogrotate("fake-group-name", "fake-base-path", "fake-size")

			logrotateFileContent, err := deps.fs.ReadFile("/etc/logrotate.d/fake-group-name")
			assert.NoError(GinkgoT(), err)
			assert.Equal(GinkgoT(), UBUNTU_EXPECTED_ETC_LOGROTATE, logrotateFileContent)
		})
		It("ubuntu set time with ntp servers", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

			ubuntu.SetTimeWithNtpServers([]string{"0.north-america.pool.ntp.org", "1.north-america.pool.ntp.org"})

			ntpConfig := deps.fs.GetFileTestStat("/fake-dir/bosh/etc/ntpserver")
			assert.Equal(GinkgoT(), "0.north-america.pool.ntp.org 1.north-america.pool.ntp.org", ntpConfig.Content)
			assert.Equal(GinkgoT(), fakesys.FakeFileTypeFile, ntpConfig.FileType)

			assert.Equal(GinkgoT(), 1, len(deps.cmdRunner.RunCommands))
			assert.Equal(GinkgoT(), []string{"ntpdate"}, deps.cmdRunner.RunCommands[0])
		})
		It("ubuntu set time with ntp servers is noop when no ntp server provided", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

			ubuntu.SetTimeWithNtpServers([]string{})
			assert.Equal(GinkgoT(), 0, len(deps.cmdRunner.RunCommands))

			ntpConfig := deps.fs.GetFileTestStat("/fake-dir/bosh/etc/ntpserver")
			assert.Nil(GinkgoT(), ntpConfig)
		})
		It("ubuntu setup ephemeral disk with path", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)
			fakeFormatter := deps.diskManager.FakeFormatter
			fakePartitioner := deps.diskManager.FakePartitioner
			fakeMounter := deps.diskManager.FakeMounter

			fakePartitioner.GetDeviceSizeInMbSizes = map[string]uint64{"/dev/xvda": uint64(1024 * 1024 * 1024)}

			deps.fs.WriteToFile("/dev/xvda", "")

			err := ubuntu.SetupEphemeralDiskWithPath("/dev/xvda")
			assert.NoError(GinkgoT(), err)

			dataDir := deps.fs.GetFileTestStat("/fake-dir/data")
			assert.Equal(GinkgoT(), fakesys.FakeFileTypeDir, dataDir.FileType)
			assert.Equal(GinkgoT(), os.FileMode(0750), dataDir.FileMode)

			assert.Equal(GinkgoT(), "/dev/xvda", fakePartitioner.PartitionDevicePath)
			assert.Equal(GinkgoT(), 2, len(fakePartitioner.PartitionPartitions))

			swapPartition := fakePartitioner.PartitionPartitions[0]
			ext4Partition := fakePartitioner.PartitionPartitions[1]

			assert.Equal(GinkgoT(), "swap", swapPartition.Type)
			assert.Equal(GinkgoT(), "linux", ext4Partition.Type)

			assert.Equal(GinkgoT(), 2, len(fakeFormatter.FormatPartitionPaths))
			assert.Equal(GinkgoT(), "/dev/xvda1", fakeFormatter.FormatPartitionPaths[0])
			assert.Equal(GinkgoT(), "/dev/xvda2", fakeFormatter.FormatPartitionPaths[1])

			assert.Equal(GinkgoT(), 2, len(fakeFormatter.FormatFsTypes))
			assert.Equal(GinkgoT(), boshdisk.FileSystemSwap, fakeFormatter.FormatFsTypes[0])
			assert.Equal(GinkgoT(), boshdisk.FileSystemExt4, fakeFormatter.FormatFsTypes[1])

			assert.Equal(GinkgoT(), 1, len(fakeMounter.MountMountPoints))
			assert.Equal(GinkgoT(), "/fake-dir/data", fakeMounter.MountMountPoints[0])
			assert.Equal(GinkgoT(), 1, len(fakeMounter.MountPartitionPaths))
			assert.Equal(GinkgoT(), "/dev/xvda2", fakeMounter.MountPartitionPaths[0])

			assert.Equal(GinkgoT(), 1, len(fakeMounter.SwapOnPartitionPaths))
			assert.Equal(GinkgoT(), "/dev/xvda1", fakeMounter.SwapOnPartitionPaths[0])

			sysLogStats := deps.fs.GetFileTestStat("/fake-dir/data/sys/log")
			assert.NotNil(GinkgoT(), sysLogStats)
			assert.Equal(GinkgoT(), fakesys.FakeFileTypeDir, sysLogStats.FileType)
			assert.Equal(GinkgoT(), os.FileMode(0750), sysLogStats.FileMode)
			assert.Equal(GinkgoT(), []string{"chown", "root:vcap", "/fake-dir/data/sys"}, deps.cmdRunner.RunCommands[0])
			assert.Equal(GinkgoT(), []string{"chown", "root:vcap", "/fake-dir/data/sys/log"}, deps.cmdRunner.RunCommands[1])

			sysRunStats := deps.fs.GetFileTestStat("/fake-dir/data/sys/run")
			assert.NotNil(GinkgoT(), sysRunStats)
			assert.Equal(GinkgoT(), fakesys.FakeFileTypeDir, sysRunStats.FileType)
			assert.Equal(GinkgoT(), os.FileMode(0750), sysRunStats.FileMode)
			assert.Equal(GinkgoT(), []string{"chown", "root:vcap", "/fake-dir/data/sys/run"}, deps.cmdRunner.RunCommands[2])
		})
		It("setup tmp dir", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

			err := ubuntu.SetupTmpDir()
			assert.NoError(GinkgoT(), err)

			assert.Equal(GinkgoT(), 2, len(deps.cmdRunner.RunCommands))

			assert.Equal(GinkgoT(), []string{"chown", "root:vcap", "/tmp"}, deps.cmdRunner.RunCommands[0])
			assert.Equal(GinkgoT(), []string{"chmod", "0770", "/tmp"}, deps.cmdRunner.RunCommands[1])
		})
		It("ubuntu mount persistent disk", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)
			fakeFormatter := deps.diskManager.FakeFormatter
			fakePartitioner := deps.diskManager.FakePartitioner
			fakeMounter := deps.diskManager.FakeMounter

			deps.fs.WriteToFile("/dev/vdf", "")

			err := ubuntu.MountPersistentDisk("/dev/sdf", "/mnt/point")
			assert.NoError(GinkgoT(), err)

			mountPoint := deps.fs.GetFileTestStat("/mnt/point")
			assert.Equal(GinkgoT(), fakesys.FakeFileTypeDir, mountPoint.FileType)
			assert.Equal(GinkgoT(), os.FileMode(0700), mountPoint.FileMode)

			partition := fakePartitioner.PartitionPartitions[0]
			assert.Equal(GinkgoT(), "/dev/vdf", fakePartitioner.PartitionDevicePath)
			assert.Equal(GinkgoT(), 1, len(fakePartitioner.PartitionPartitions))
			assert.Equal(GinkgoT(), "linux", partition.Type)

			assert.Equal(GinkgoT(), 1, len(fakeFormatter.FormatPartitionPaths))
			assert.Equal(GinkgoT(), "/dev/vdf1", fakeFormatter.FormatPartitionPaths[0])

			assert.Equal(GinkgoT(), 1, len(fakeFormatter.FormatFsTypes))
			assert.Equal(GinkgoT(), boshdisk.FileSystemExt4, fakeFormatter.FormatFsTypes[0])

			assert.Equal(GinkgoT(), 1, len(fakeMounter.MountMountPoints))
			assert.Equal(GinkgoT(), "/mnt/point", fakeMounter.MountMountPoints[0])
			assert.Equal(GinkgoT(), 1, len(fakeMounter.MountPartitionPaths))
			assert.Equal(GinkgoT(), "/dev/vdf1", fakeMounter.MountPartitionPaths[0])
		})
		It("ubuntu unmount persistent disk when not mounted", func() {

			testUbuntuUnmountPersistentDisk(GinkgoT(), false)
		})
		It("ubuntu unmount persistent disk when already mounted", func() {

			testUbuntuUnmountPersistentDisk(GinkgoT(), true)
		})
		It("ubuntu normalize disk path", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

			deps.fs.WriteToFile("/dev/xvda", "")
			path, found := ubuntu.NormalizeDiskPath("/dev/sda")

			assert.Equal(GinkgoT(), path, "/dev/xvda")
			assert.True(GinkgoT(), found)

			deps.fs.RemoveAll("/dev/xvda")
			deps.fs.WriteToFile("/dev/vda", "")
			path, found = ubuntu.NormalizeDiskPath("/dev/sda")

			assert.Equal(GinkgoT(), path, "/dev/vda")
			assert.True(GinkgoT(), found)

			deps.fs.RemoveAll("/dev/vda")
			deps.fs.WriteToFile("/dev/sda", "")
			path, found = ubuntu.NormalizeDiskPath("/dev/sda")

			assert.Equal(GinkgoT(), path, "/dev/sda")
			assert.True(GinkgoT(), found)
		})
		It("ubuntu get file contents from c d r o m", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

			deps.fs.WriteToFile("/dev/bosh-cdrom", "")
			settingsPath := filepath.Join(ubuntu.GetDirProvider().SettingsDir(), "env")
			deps.fs.WriteToFile(settingsPath, "some stuff")
			deps.fs.WriteToFile("/proc/sys/dev/cdrom/info", "CD-ROM information, Id: cdrom.c 3.20 2003/12/17\n\ndrive name:		sr0\ndrive speed:		32\n")

			contents, err := ubuntu.GetFileContentsFromCDROM("env")
			assert.NoError(GinkgoT(), err)

			assert.Equal(GinkgoT(), 3, len(deps.cmdRunner.RunCommands))
			assert.Equal(GinkgoT(), []string{"mount", "/dev/sr0", "/fake-dir/bosh/settings"}, deps.cmdRunner.RunCommands[0])
			assert.Equal(GinkgoT(), []string{"umount", "/fake-dir/bosh/settings"}, deps.cmdRunner.RunCommands[1])
			assert.Equal(GinkgoT(), []string{"eject", "/dev/sr0"}, deps.cmdRunner.RunCommands[2])

			assert.Equal(GinkgoT(), contents, []byte("some stuff"))
		})
		It("ubuntu get file contents from c d r o m when c d r o m failed to load", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

			deps.fs.WriteToFile("/dev/sr0/env", "some stuff")
			deps.fs.WriteToFile("/proc/sys/dev/cdrom/info", "CD-ROM information, Id: cdrom.c 3.20 2003/12/17\n\ndrive name:		sr0\ndrive speed:		32\n")

			_, err := ubuntu.GetFileContentsFromCDROM("env")
			assert.Error(GinkgoT(), err)
		})
		It("ubuntu get file contents from c d r o m retries c d r o m reading", func() {

			deps, ubuntu := buildUbuntu(1*time.Second, 1*time.Millisecond)

			settingsPath := filepath.Join(ubuntu.GetDirProvider().SettingsDir(), "env")
			deps.fs.WriteToFile(settingsPath, "some stuff")
			deps.fs.WriteToFile("/proc/sys/dev/cdrom/info", "CD-ROM information, Id: cdrom.c 3.20 2003/12/17\n\ndrive name:		sr0\ndrive speed:		32\n")

			go func() {
				_, err := ubuntu.GetFileContentsFromCDROM("env")
				assert.NoError(GinkgoT(), err)
			}()

			time.Sleep(500 * time.Millisecond)
			deps.fs.WriteToFile("/dev/bosh-cdrom", "")
		})
		It("ubuntu get real device path with multiple possible devices", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

			deps.fs.WriteToFile("/dev/xvda", "")
			deps.fs.WriteToFile("/dev/vda", "")

			realPath, found := ubuntu.NormalizeDiskPath("/dev/sda")
			assert.True(GinkgoT(), found)
			assert.Equal(GinkgoT(), "/dev/xvda", realPath)
		})
		It("ubuntu get real device path with delay within timeout", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Second)

			time.AfterFunc(time.Second, func() {
				deps.fs.WriteToFile("/dev/xvda", "")
			})

			realPath, found := ubuntu.NormalizeDiskPath("/dev/sda")
			assert.True(GinkgoT(), found)
			assert.Equal(GinkgoT(), "/dev/xvda", realPath)
		})
		It("ubuntu get real device path with delay beyond timeout", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

			time.AfterFunc(2*time.Second, func() {
				deps.fs.WriteToFile("/dev/xvda", "")
			})

			_, found := ubuntu.NormalizeDiskPath("/dev/sda")
			assert.False(GinkgoT(), found)
		})
		It("ubuntu calculate ephemeral disk partition sizes when disk is bigger than twice the memory", func() {

			totalMemInMb := uint64(1024)

			diskSizeInMb := totalMemInMb*2 + 64
			expectedSwap := totalMemInMb
			testUbuntuCalculateEphemeralDiskPartitionSizes(GinkgoT(), totalMemInMb, diskSizeInMb, expectedSwap)
		})
		It("ubuntu calculate ephemeral disk partition sizes when disk twice the memory or smaller", func() {

			totalMemInMb := uint64(1024)

			diskSizeInMb := totalMemInMb*2 - 64
			expectedSwap := diskSizeInMb / 2
			testUbuntuCalculateEphemeralDiskPartitionSizes(GinkgoT(), totalMemInMb, diskSizeInMb, expectedSwap)
		})
		It("ubuntu migrate persistent disk", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)
			fakeMounter := deps.diskManager.FakeMounter

			ubuntu.MigratePersistentDisk("/from/path", "/to/path")

			assert.Equal(GinkgoT(), fakeMounter.RemountAsReadonlyPath, "/from/path")

			assert.Equal(GinkgoT(), 1, len(deps.cmdRunner.RunCommands))
			assert.Equal(GinkgoT(), []string{"sh", "-c", "(tar -C /from/path -cf - .) | (tar -C /to/path -xpf -)"}, deps.cmdRunner.RunCommands[0])

			assert.Equal(GinkgoT(), fakeMounter.UnmountPartitionPath, "/from/path")
			assert.Equal(GinkgoT(), fakeMounter.RemountFromMountPoint, "/to/path")
			assert.Equal(GinkgoT(), fakeMounter.RemountToMountPoint, "/from/path")
		})
		It("ubuntu is device path mounted", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

			deps.fs.WriteToFile("/dev/xvda", "")
			fakeMounter := deps.diskManager.FakeMounter
			fakeMounter.IsMountedResult = true

			result, err := ubuntu.IsDevicePathMounted("/dev/sda")
			assert.NoError(GinkgoT(), err)
			assert.True(GinkgoT(), result)
			assert.Equal(GinkgoT(), fakeMounter.IsMountedDevicePathOrMountPoint, "/dev/xvda1")
		})
		It("ubuntu start monit", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

			err := ubuntu.StartMonit()
			assert.NoError(GinkgoT(), err)
			assert.Equal(GinkgoT(), 1, len(deps.cmdRunner.RunCommands))
			assert.Equal(GinkgoT(), []string{"sv", "up", "monit"}, deps.cmdRunner.RunCommands[0])
		})
		It("ubuntu setup monit user if file does not exist", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

			err := ubuntu.SetupMonitUser()
			assert.NoError(GinkgoT(), err)

			monitUserFileStats := deps.fs.GetFileTestStat("/fake-dir/monit/monit.user")
			assert.NotNil(GinkgoT(), monitUserFileStats)
			assert.Equal(GinkgoT(), "vcap:random-password", monitUserFileStats.Content)
		})
		It("ubuntu setup monit user if file does exist", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

			deps.fs.WriteToFile("/fake-dir/monit/monit.user", "vcap:other-random-password")

			err := ubuntu.SetupMonitUser()
			assert.NoError(GinkgoT(), err)

			monitUserFileStats := deps.fs.GetFileTestStat("/fake-dir/monit/monit.user")
			assert.NotNil(GinkgoT(), monitUserFileStats)
			assert.Equal(GinkgoT(), "vcap:other-random-password", monitUserFileStats.Content)
		})
		It("ubuntu get monit credentials reads monit file from disk", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

			deps.fs.WriteToFile("/fake-dir/monit/monit.user", "fake-user:fake-random-password")

			username, password, err := ubuntu.GetMonitCredentials()
			assert.NoError(GinkgoT(), err)

			assert.Equal(GinkgoT(), "fake-user", username)
			assert.Equal(GinkgoT(), "fake-random-password", password)
		})
		It("ubuntu get monit credentials errs when invalid file format", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)

			deps.fs.WriteToFile("/fake-dir/monit/monit.user", "fake-user")

			_, _, err := ubuntu.GetMonitCredentials()
			assert.Error(GinkgoT(), err)
		})
		It("ubuntu get monit credentials leaves colons in password intact", func() {

			deps, ubuntu := buildUbuntu(1*time.Millisecond, 1*time.Millisecond)
			deps.fs.WriteToFile("/fake-dir/monit/monit.user", "fake-user:fake:random:password")

			username, password, err := ubuntu.GetMonitCredentials()
			assert.NoError(GinkgoT(), err)

			assert.Equal(GinkgoT(), "fake-user", username)
			assert.Equal(GinkgoT(), "fake:random:password", password)
		})
	})
}
