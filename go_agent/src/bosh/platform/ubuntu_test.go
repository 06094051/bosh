package platform

import (
	"bosh/settings"
	testsys "bosh/system/testhelpers"
	"github.com/stretchr/testify/assert"
	"os"
	"path/filepath"
	"testing"
)

func TestUbuntuSetupSsh(t *testing.T) {
	fakeFs, fakeCmdRunner := getUbuntuDependencies()
	fakeFs.HomeDirHomeDir = "/some/home/dir"

	ubuntu := newUbuntuPlatform(fakeFs, fakeCmdRunner)
	ubuntu.SetupSsh("some public key", "vcap")

	sshDirPath := "/some/home/dir/.ssh"
	sshDirStat := fakeFs.GetFileTestStat(sshDirPath)

	assert.Equal(t, fakeFs.HomeDirUsername, "vcap")

	assert.NotNil(t, sshDirStat)
	assert.Equal(t, sshDirStat.CreatedWith, "MkdirAll")
	assert.Equal(t, sshDirStat.FileMode, os.FileMode(0700))
	assert.Equal(t, sshDirStat.Username, "vcap")

	authKeysStat := fakeFs.GetFileTestStat(filepath.Join(sshDirPath, "authorized_keys"))

	assert.NotNil(t, authKeysStat)
	assert.Equal(t, authKeysStat.CreatedWith, "WriteToFile")
	assert.Equal(t, authKeysStat.FileMode, os.FileMode(0600))
	assert.Equal(t, authKeysStat.Username, "vcap")
	assert.Equal(t, authKeysStat.Content, "some public key")
}

func TestUbuntuSetupDhcp(t *testing.T) {
	fakeFs, fakeCmdRunner := getUbuntuDependencies()
	testUbuntuSetupDhcp(t, fakeFs, fakeCmdRunner)

	assert.Equal(t, len(fakeCmdRunner.RunCommands), 2)
	assert.Equal(t, fakeCmdRunner.RunCommands[0], []string{"pkill", "dhclient3"})
	assert.Equal(t, fakeCmdRunner.RunCommands[1], []string{"/etc/init.d/networking", "restart"})
}

func TestUbuntuSetupDhcpWithPreExistingConfiguration(t *testing.T) {
	fakeFs, fakeCmdRunner := getUbuntuDependencies()
	fakeFs.WriteToFile("/etc/dhcp3/dhclient.conf", EXPECTED_DHCP_CONFIG)
	testUbuntuSetupDhcp(t, fakeFs, fakeCmdRunner)

	assert.Equal(t, len(fakeCmdRunner.RunCommands), 0)
}

func testUbuntuSetupDhcp(t *testing.T, fakeFs *testsys.FakeFileSystem, fakeCmdRunner *testsys.FakeCmdRunner) {
	networks := settings.Networks{
		"bosh": settings.NetworkSettings{
			Default: []string{"dns"},
			Dns:     []string{"xx.xx.xx.xx", "yy.yy.yy.yy", "zz.zz.zz.zz"},
		},
		"vip": settings.NetworkSettings{
			Default: []string{},
			Dns:     []string{"aa.aa.aa.aa"},
		},
	}

	ubuntu := newUbuntuPlatform(fakeFs, fakeCmdRunner)
	ubuntu.SetupDhcp(networks)

	dhcpConfig := fakeFs.GetFileTestStat("/etc/dhcp3/dhclient.conf")
	assert.NotNil(t, dhcpConfig)
	assert.Equal(t, dhcpConfig.Content, EXPECTED_DHCP_CONFIG)
}

const EXPECTED_DHCP_CONFIG = `# Generated by bosh-agent

option rfc3442-classless-static-routes code 121 = array of unsigned integer 8;

send host-name "<hostname>";

request subnet-mask, broadcast-address, time-offset, routers,
	domain-name, domain-name-servers, domain-search, host-name,
	netbios-name-servers, netbios-scope, interface-mtu,
	rfc3442-classless-static-routes, ntp-servers;

prepend domain-name-servers zz.zz.zz.zz;
prepend domain-name-servers yy.yy.yy.yy;
prepend domain-name-servers xx.xx.xx.xx;
`

func TestUbuntuGetCpuLoad(t *testing.T) {
	fakeFs, fakeCmdRunner := getUbuntuDependencies()
	ubuntu := newUbuntuPlatform(fakeFs, fakeCmdRunner)

	load, err := ubuntu.GetCpuLoad()
	assert.NoError(t, err)
	assert.True(t, load.One > 0)
	assert.True(t, load.Five > 0)
	assert.True(t, load.Fifteen > 0)
}

func TestUbuntuGetCpuStats(t *testing.T) {
	fakeFs, fakeCmdRunner := getUbuntuDependencies()
	ubuntu := newUbuntuPlatform(fakeFs, fakeCmdRunner)

	stats, err := ubuntu.GetCpuStats()
	assert.NoError(t, err)
	assert.True(t, stats.User > 0)
	assert.True(t, stats.Sys > 0)
	assert.True(t, stats.Total > 0)
}

func TestUbuntuGetMemStats(t *testing.T) {
	fakeFs, fakeCmdRunner := getUbuntuDependencies()
	ubuntu := newUbuntuPlatform(fakeFs, fakeCmdRunner)

	stats, err := ubuntu.GetMemStats()
	assert.NoError(t, err)
	assert.True(t, stats.Total > 0)
	assert.True(t, stats.Used > 0)
}

func TestUbuntuGetSwapStats(t *testing.T) {
	fakeFs, fakeCmdRunner := getUbuntuDependencies()
	ubuntu := newUbuntuPlatform(fakeFs, fakeCmdRunner)

	stats, err := ubuntu.GetSwapStats()
	assert.NoError(t, err)
	assert.True(t, stats.Total > 0)
}

func TestUbuntuGetDiskStats(t *testing.T) {
	fakeFs, fakeCmdRunner := getUbuntuDependencies()
	ubuntu := newUbuntuPlatform(fakeFs, fakeCmdRunner)

	stats, err := ubuntu.GetDiskStats("/")
	assert.NoError(t, err)
	assert.True(t, stats.Total > 0)
	assert.True(t, stats.Used > 0)
	assert.True(t, stats.InodeTotal > 0)
	assert.True(t, stats.InodeUsed > 0)
}

func getUbuntuDependencies() (fs *testsys.FakeFileSystem, cmdRunner *testsys.FakeCmdRunner) {
	fs = &testsys.FakeFileSystem{}
	cmdRunner = &testsys.FakeCmdRunner{}
	return
}
