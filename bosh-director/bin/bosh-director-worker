#!/usr/bin/env ruby

require 'erb'
require 'bosh/director'
require 'resque/failure/backtrace'

require 'redis/errors'

class Redis
  class Client
    def io
      if File.exist?('/tmp/kill-redis')
        raise Redis::TimeoutError
      end

      yield
    rescue TimeoutError
      raise TimeoutError, "Connection timed out"
    rescue Errno::ECONNRESET, Errno::EPIPE, Errno::ECONNABORTED, Errno::EBADF, Errno::EINVAL => e
      raise ConnectionError, "Connection lost (%s)" % [e.class.name.split("::").last]
    end
  end
end


config_file = nil
index = nil
erb = false

opts = OptionParser.new do |op|
  op.on('-c', '--config [ARG]', 'Configuration File') do |opt|
    config_file = opt
  end

  op.on('-i', '--index [ARG]', Integer, 'Worker Index') do |opt|
    index = opt
  end

  op.on('-e', '--[no-]erb', 'Treat Configuration as ERB Template') do |opt|
    erb = opt
  end
end

opts.parse!(ARGV.dup)

config_file ||= ::File.expand_path('../../config/bosh-director.yml', __FILE__)
config = nil

# Is this code even used anymore?
if erb
  class ConfigBindingHelper
    attr_reader :index

    def initialize(index)
      @index = index
    end

    def get_binding
      binding
    end
  end

  template = ERB.new(File.read(config_file), 0, '%<>-')
  contents = template.result(ConfigBindingHelper.new(index).get_binding)
  config_hash = Psych.load(contents)
  config = Bosh::Director::Config.load_hash(config_hash)
else
  config = Bosh::Director::Config.load_file(config_file)
end

Bosh::Director::App.new(config)

Resque.logger = config.resque_logger

worker = nil
queues = (ENV['QUEUES'] || ENV['QUEUE']).to_s.split(',')

begin
  worker = Resque::Worker.new(*queues)
  worker.term_child = true
rescue Resque::NoQueueError
  abort 'set QUEUE env var, e.g. $ QUEUE=critical,high rake resque:work'
end

Resque.after_fork do
  EM.error_handler { |e| puts "Error raised during event loop: #{e.inspect}, backtrace: #{e.backtrace}" }
  Thread.new { EM.run }
end

Resque::Failure.backend = Resque::Failure::Backtrace

begin
  worker.log "Starting worker #{worker}. Resque info:\n#{Resque.info.inspect}"
  worker.work(ENV['INTERVAL'] || 5) # interval, will block
rescue Redis::TimeoutError => e
  worker.log "Redis timeout error: #{e.inspect}"
  sleep 1
  retry
end
